<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails Development</title>
    <link>https://trevordjones.github.io/cheatsheets/</link>
    <description>Recent content on Rails Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Sep 2016 10:23:48 -0400</lastBuildDate>
    <atom:link href="https://trevordjones.github.io/cheatsheets/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Carrierwave to Upload Images</title>
      <link>https://trevordjones.github.io/cheatsheets/post/carrierwave/</link>
      <pubDate>Tue, 20 Sep 2016 10:23:48 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/carrierwave/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add gem to Gemfile&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;carrierwave&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bundle it up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rails generate uploader RecipePhoto&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The above command will create a file in your &lt;code&gt;app/uploaders&lt;/code&gt; directory. It will contain a class called &lt;code&gt;RecipePhotoUploader&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your terminal, run &lt;code&gt;rails g migration AddPhotoToRecipe photo&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then &lt;code&gt;rake db:migrate&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your model (Recipe in this case), add&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;mount_uploader :photo, RecipePhotoUploader
# this connects the RecipePhotoUploader we generated to the photo column in the recipe model.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the form. To get this to work with &lt;code&gt;form_tag&lt;/code&gt;, use the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= form_tag(&amp;quot;/recipes/#{@recipe.id}&amp;quot;, method: &#39;patch&#39;, enctype: &amp;quot;multipart/form-data&amp;quot;) do %&amp;gt;
  &amp;lt;%= label_tag(:photo) %&amp;gt;
  &amp;lt;%= file_field_tag(:photo) %&amp;gt;
  # Whatever else needs to be included
  &amp;lt;%= submit_tag(&amp;quot;Save&amp;quot;) %&amp;gt;
&amp;lt;% end %&amp;gt;

# Important part is the enctype: &amp;quot;multipart/form-data&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def update
  recipe = Recipe.find_by(id: params[:id])
  recipe.update(
    photo: params[:photo]
    # whatever else you want updated
  )
  redirect_to &amp;quot;/recipes/#{@recipe.id}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can display the photo in your view with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&amp;lt;%= image_tag(@recipe.photo.url) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Create an API</title>
      <link>https://trevordjones.github.io/cheatsheets/post/create-an-api/</link>
      <pubDate>Thu, 08 Sep 2016 16:43:01 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/create-an-api/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Create brand new app &lt;code&gt;rails new name-of-api -T -d postgresql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rails g model Person first_name last_name email phone&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake db:migrate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rails g controller api/v1/people&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;a href=&#34;https://github.com/stympy/faker&#34;&gt;Faker gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bundle&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a seed file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;100.times do
  Person.create(:prefix =&amp;gt; Faker::Name.prefix,
                :first_name =&amp;gt; Faker::Name.first_name,
                :middle_name =&amp;gt; Faker::Name.first_name,
                :last_name =&amp;gt; Faker::Name.last_name,
                :suffix =&amp;gt; Faker::Name.suffix,
                :email =&amp;gt; Faker::Internet.email,
                :phone =&amp;gt; Faker::PhoneNumber.phone_number)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;rake db:seed&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;in &lt;code&gt;routes.rb&lt;/code&gt; file, add RESTful routes for people&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an &lt;code&gt;index&lt;/code&gt; action in your controller&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create an &lt;code&gt;index.json.jbuilder&lt;/code&gt; file in your corresponding views&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Follow &lt;a href=&#34;https://github.com/rails/jbuilder&#34;&gt;jbuilder documentation&lt;/a&gt; in your view&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start your server and view your JSON!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add any other RESTful actions that are needed for your API&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Install Theme in Rails</title>
      <link>https://trevordjones.github.io/cheatsheets/post/install-theme-in-rails/</link>
      <pubDate>Wed, 07 Sep 2016 17:45:32 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/install-theme-in-rails/</guid>
      <description>

&lt;h3 id=&#34;tips&#34;&gt;Tips&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Read their README - many will have one but perhaps not every single one. The README is usually the &lt;code&gt;index.html&lt;/code&gt; file you see in the theme&amp;rsquo;s parent directory. If you double click on it, it should open up in the browser.&lt;/li&gt;
&lt;li&gt;Look through what is required for the theme. It will most likely show you what css files are necessary and which are not.&lt;/li&gt;
&lt;li&gt;Look through the &lt;code&gt;index.html&lt;/code&gt; file to see their &lt;code&gt;link&lt;/code&gt; tags for stylesheets. This will also tell you which ones they are using.&lt;/li&gt;
&lt;li&gt;You will not need to include their bootstrap.css file - use the gem to use Bootstrap.&lt;/li&gt;
&lt;li&gt;If they are using Font Awesome, you will also not have to include that. Use the &lt;code&gt;font-awesome-rails&lt;/code&gt; gem instead.&lt;/li&gt;
&lt;li&gt;Check to see if they have classes/ids on their &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. This is true for anything though - make sure class and id names are matching up with what they have.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;integrate-into-your-app&#34;&gt;Integrate into your App&lt;/h2&gt;

&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Copy over all the css files into &lt;code&gt;vendor/assets/stylesheets&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a &lt;code&gt;manifest.css&lt;/code&gt; file in the same directory and place the following within it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/*
*= require_tree .
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will require all the files in &lt;code&gt;vendor/assets/stylesheets&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now inside your &lt;code&gt;app/assets/stylesheets/application.css&lt;/code&gt; file add &lt;code&gt;*= require manifest&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; &lt;code&gt;require_tree .&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to your theme&amp;rsquo;s &lt;code&gt;index.html&lt;/code&gt; file and copy the top nav elements from it. This file will normally have comments telling you which sections are which, so simply look for the section that outlines your top nav. Paste this into your &lt;code&gt;application.html.erb&lt;/code&gt; file right below the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag and &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;yield&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Also include the footer section from the &lt;code&gt;index.html&lt;/code&gt; file. Copy and paste it &lt;em&gt;below&lt;/em&gt; the &lt;code&gt;yield&lt;/code&gt; method in the &lt;code&gt;application.html.erb&lt;/code&gt; file but before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside your &lt;code&gt;application.html.erb&lt;/code&gt; file will be html you want included on every page in your site. This is why we only did the nav and the footer. If there is anything else you want to appear on every page - include it inside this &lt;code&gt;application.html.erb&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You can do much the same thing with JavaScript. Include all their necessary JS files into &lt;code&gt;vendor/assets/javascripts&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will not need their jQuery file since it&amp;rsquo;s included with Rails by default (be careful with this though. Your theme may be using a different version of jQuery that has breaking changes with Rails version of jQuery. Be aware of that.)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the &lt;code&gt;manifest.js&lt;/code&gt; file and include:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// require_tree .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now inside &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt; include &lt;code&gt;//require manifest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check your console for JS errors&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;js-tips&#34;&gt;JS Tips&lt;/h3&gt;

&lt;p&gt;Sometimes the JS will be looking for elements that have not been created yet. That is because the code to include JS into your html is towards the top of the page and can run before the rest of the html is rendered. So if it&amp;rsquo;s looking for an id of &amp;ldquo;main&amp;rdquo; (which is in your html) and can&amp;rsquo;t find it - it&amp;rsquo;s running before that particular bit of html is created.&lt;/p&gt;

&lt;p&gt;To solve this, simply move the &lt;code&gt;&amp;lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39;: &#39;reload&#39; %&amp;gt;&lt;/code&gt; to be below the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag. This will ensure the JS doesn&amp;rsquo;t run before the page is loaded.&lt;/p&gt;

&lt;p&gt;Check your console for JS errors. It should tell you where there are problems if any.&lt;/p&gt;

&lt;h3 id=&#34;images&#34;&gt;Images&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Copy images you want to use to your &lt;code&gt;app/assets/images&lt;/code&gt; directory.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you want to use these inside your html, you can&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;%= image_tag(&#39;image_name.png&#39;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will convert to &lt;code&gt;&amp;lt;img src=&amp;quot;/assets/images/image_name.png&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;. This is the preferred way in Rails to include your images.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Angular Setup</title>
      <link>https://trevordjones.github.io/cheatsheets/post/angular-setup/</link>
      <pubDate>Wed, 07 Sep 2016 12:44:51 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/angular-setup/</guid>
      <description>

&lt;h3 id=&#34;setup-angular-in-your-rails-app&#34;&gt;Setup Angular in your Rails App&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://angularjs.org&#34;&gt;https://angularjs.org&lt;/a&gt; and download the compressed angular.js file.&lt;/li&gt;
&lt;li&gt;Copy that file into &lt;code&gt;vendor/assets/javascripts&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;//= require angular&lt;/code&gt; to the asset pipeline (i.e. &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;) on the line before &lt;code&gt;//= require_tree .&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Get rid of the turbolinks line in that file, which can cause problems down the road.&lt;/li&gt;
&lt;li&gt;Create a new file inside &lt;code&gt;app/assets/javascripts&lt;/code&gt; called &lt;code&gt;app.js&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function() {
  &amp;quot;use strict&amp;quot;;

  angular.module(&amp;quot;app&amp;quot;, []);

})();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Back to &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;. Below &lt;code&gt;require angular&lt;/code&gt; add &lt;code&gt;//= require app&lt;/code&gt;. It must be below Angular.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add to your html where you want to inject Angular&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-app=&amp;quot;app&amp;quot;&amp;gt;
{{ 1 + 1 }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to that page in the browser and see that the number 2 appears. If so, Angular is properly installed!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;setup-an-angular-controller&#34;&gt;Setup an Angular Controller&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;app/assets/javascripts/controllers&lt;/code&gt; add a controller file called &lt;code&gt;test_ctrl.js&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function () {
  &amp;quot;use strict&amp;quot;;

  angular.module(&amp;quot;app&amp;quot;).controller(&amp;quot;testCtrl&amp;quot;, function($scope) {
    $scope.message = &amp;quot;Hello!&amp;quot;;
  });
})();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then inside your html file where you included the Angular app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-app=&amp;quot;app&amp;quot;&amp;gt;
  &amp;lt;div ng-controller=&amp;quot;stuffCtrl&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check in your browser that you have the &amp;ldquo;Hello!&amp;rdquo; message appearing.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Postgres Error</title>
      <link>https://trevordjones.github.io/cheatsheets/post/shutdown-restart-postgres/</link>
      <pubDate>Sun, 21 Aug 2016 19:24:20 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/shutdown-restart-postgres/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve probably all gotten the error from Postgres&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;could not connect to server: No such file or directory
Is the server running locally and accepting
connections on Unix domain socket &amp;quot;/tmp/.s.PGSQL.5432&amp;quot;?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This happens when you do not shut down your running Postgres properly. This can happen when you shut down your computer or when you just close the terminal. You can prevent this by first shutting down Postgres before shutting down your computer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services stop postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the next time you open your terminal, you can run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew services start postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you shut down before you had a chance to close Postgres, you&amp;rsquo;ll need to remove the &lt;code&gt;postmaster.pid&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /usr/local/var/postgres
$ rm -rf postmaster.pid
# Now you can start Postgres again
$ brew services start postgres
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Atom Shortcuts</title>
      <link>https://trevordjones.github.io/cheatsheets/post/atom-shortcuts/</link>
      <pubDate>Thu, 04 Aug 2016 17:45:55 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/atom-shortcuts/</guid>
      <description>

&lt;h3 id=&#34;editing&#34;&gt;Editing&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Command&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;What it do&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-,&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;opens the preferences page&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-enter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;start new line below current line. Does not matter where cursor is&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-enter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;start new line above current line. Does not matter where cursor is&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Highlight all text to the left of cursor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Highlight all text to the left of cursor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Highlight all text to the left of cursor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Highlight all text to the left of cursor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-left&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Highlight all text to the right of cursor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-left&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Highlight all text to the right of cursor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ctrl-cmd-up&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;swaps the current line with the line above&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ctrl-cmd-up&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;swaps the current line with the line below&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;open &amp;ldquo;fuzzy finder&amp;rdquo;. From here you can search for files in the opened directory&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;copy&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;with no text selected &amp;ndash; copies the entire line where the cursor is&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;paste&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-shift-d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;duplicate line where cursor is&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ctrl-shift-k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;deletes the line where the cursor is&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;highlight current word - if you continue to &lt;code&gt;cmd-d&lt;/code&gt;, it will start to select each word that is the same. This gives you multiple cursors for editing&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ctrl-m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;go to matching bracket&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;toggle comment&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;navigating-file&#34;&gt;Navigating File&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Command&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;What it do&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bring cursor to end of the line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-left&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;bring cursor to beginning of the line&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd+\&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;toggle tree view (thing on the left of the editor that shows your files)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd-w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;close current window&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Rails Commands</title>
      <link>https://trevordjones.github.io/cheatsheets/post/rails-commands/</link>
      <pubDate>Tue, 02 Aug 2016 17:26:43 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/rails-commands/</guid>
      <description>&lt;p&gt;Anything below surrounded in ** is to be replaced with your own custom words!&lt;/p&gt;

&lt;p&gt;To create a new rails project&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails new *name-of-your-app* --database=postgresql

# Don’t forget that to work with your app, you need to be in the correct directory! So, do:
cd *name-of-your-app*

#To create your postgres database:
rake db:create

# To run your rails app (also known as the webserver):
rails server # or rails s

#NOTE: Once your rails server is running, you will no longer be able to run commands from that terminal tab - it is being hogged by the rails server. You must create a new terminal tab (Command + T) and run your terminal commands from there.

#To create a new controller: (the name of your controller must be PLURAL!)
rails generate controller *name-of-your-controllers*
# Example: rails generate controller recipes

#To create a new model: (the name of your model must be SINGULAR!)
rails generate model *ModelName* attribute_1 attribute_2 attribute_3 ..etc…
#Example: rails generate model Recipe title chef prep_time:integer

# After creating each model, you must enter run
rake db:migrate

#To run your rails console:
rails console # or rails c
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install Bootstrap</title>
      <link>https://trevordjones.github.io/cheatsheets/post/install-bootstrap/</link>
      <pubDate>Tue, 02 Aug 2016 17:26:29 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/install-bootstrap/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add ‘bootstrap-sass’ anywhere in your Gemfile.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside your terminal (make sure you’re in the folder where your Rails app is), run: bundle&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside &lt;code&gt;app/assets/stylesheets&lt;/code&gt;, create a new file called &lt;code&gt;_external.css.scss&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add these lines to that file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@import &amp;quot;bootstrap-sprockets&amp;quot;;
@import &amp;quot;bootstrap&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt;, add this line under the line that says &lt;code&gt;//=require jquery&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//= require bootstrap-sprockets
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If your rails server was already running, restart it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Migrations</title>
      <link>https://trevordjones.github.io/cheatsheets/post/migrations/</link>
      <pubDate>Tue, 02 Aug 2016 17:26:15 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/migrations/</guid>
      <description>&lt;p&gt;&lt;strong&gt;To create a database:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:create
# Note: you only need to do this once per app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;To create a new table in the database:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate model Product name:string description:text &#39;price:decimal{5,2}&#39;
# DOUBLE CHECK THE GENERATED MIGRATION FILE CODE (in db/migrate folder)
# If there are typos, you can fix them now before doing the next step

rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: A description of rails database types can be found &lt;a href=&#34;http://stackoverflow.com/questions/11889048/is-there-documentation-for-the-rails-column-types&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To make changes to existing database tables:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rails generate migration NameDescribingTheChange
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add code to the new migration file generated in the db/migrate folder.&lt;br /&gt;
All available commands here: &lt;a href=&#34;http://api.rubyonrails.org/classes/ActiveRecord/Migration.html&#34;&gt;http://api.rubyonrails.org/classes/ActiveRecord/Migration.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Add a column
add_column :products, :image, :string

# Rename a column:
rename_column :products, :image, :photo
# In this example, image is the old name, photo is the new name

# Remove a column:
remove_column :products, :photo, :string

# Change a data type:
change_column :products, :quantity, :integer
# In this example, quantity will become an integer

# Using decimals:
add_column :products, :price, :decimal, precision: 5, scale: 2
# Precision is the total number of digits, scale is the number of digits after the decimal
# In this example, 103.42 is a valid price, 3432.21 is invalid (total digits is greater than precision)

# NOTE: postgres is a bit touchy changing strings to decimals, use these two lines in a migration:
change_column :products, :price, &amp;quot;numeric USING CAST(price AS numeric)&amp;quot;
change_column :products, :price, :decimal, precision: 9, scale: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DOUBLE CHECK YOUR MIGRATION FILE CODE&lt;br /&gt;
If there are typos, you can fix them now before doing the next step&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Shortcuts for the above:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To add a column to a table:
rails generate migration AddImageToProducts image:string

# To remove a column from a table:
rails generate migration RemovePhotoFromProducts photo:string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No other shortcuts exist - if you need to rename, change, etc., you’ll need to generate an empty migration file and write the code in as described above&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To generate sample data for database:&lt;/strong&gt;&lt;br /&gt;
Write code in the &lt;code&gt;db/seeds.rb&lt;/code&gt; file (instead of through the rails console)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rake db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: If you already have sample data created from rails console or your application, you can use this gem to generate a seed file so others can reproduce it: &lt;a href=&#34;https://github.com/rroblak/seed_dump&#34;&gt;https://github.com/rroblak/seed_dump&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terminal Commands</title>
      <link>https://trevordjones.github.io/cheatsheets/post/terminal/</link>
      <pubDate>Tue, 02 Aug 2016 17:25:54 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/terminal/</guid>
      <description>

&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls # list directory contents

$ ls -l # list directory contents as a list (one per line)

$ ls -la # list directory contents as well as hidden files (files that begin with a &#39;.&#39;)

$ cd &#39;directory_name&#39; # change into the given directory

$ cd .. # cd out of the current directory - one level

$ cd ../.. # cd out two levels

$ cd ~ # go to home directory (should be your computer username)

$ cd / # go to root directory

$ mkdir &#39;directory_name&#39; # create directory

$ rm # remove file
$ rmdir # remove directory - will only work if directory is empty
$ rm -rf &#39;directory_name&#39; # remove directory and ALL it&#39;s contents. Be warned when using this - you will not be prompted to continue. It will just wipe it out.

$ touch &#39;file_name&#39; # create a file with the name you give it

$ pwd # Get complete file path

$ cat &#39;file_name&#39; # print contents of the file to the terminal

$ echo &#39;add this text&#39; &amp;gt;&amp;gt; &#39;file_name.txt&#39; # Add text to a file
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hotkeys&#34;&gt;Hotkeys&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tab - Autocomplete to file path. You just need to type the first letter or two and then it will complete&lt;/li&gt;
&lt;li&gt;Up/Down Arrow - See command history&lt;/li&gt;
&lt;li&gt;CTRL + r &amp;lsquo;previous command&amp;rsquo; - Search command history&lt;/li&gt;
&lt;li&gt;CTRL + l - clears the screen but does not get rid of session history&lt;/li&gt;
&lt;li&gt;CMD + k - clears the screen and does get rid of session history&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://trevordjones.github.io/cheatsheets/post/authentication/</link>
      <pubDate>Tue, 02 Aug 2016 17:25:20 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/authentication/</guid>
      <description>

&lt;h2 id=&#34;part-1-signup-create-a-new-user&#34;&gt;Part 1: Signup (create a new user)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a User model in the terminal&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g model User name email password_digest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add user routes to &lt;code&gt;config/routes.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;get &#39;/signup&#39; =&amp;gt; &#39;users#new&#39;
post &#39;/users&#39; =&amp;gt; &#39;users#create&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a &lt;code&gt;users_controller&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g controller Users
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; actions in the controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/users_controller.rb
class UsersController &amp;lt; ApplicationController
  def new
    render &#39;new.html.erb&#39;
  end

  def create
    user = User.new(
      name: params[:name],
      email: params[:email],
      password: params[:password],
      password_confirmation: params[:password_confirmation]
    )
    if user.save
      session[:user_id] = user.id
      flash[:success] = &#39;Successfully created account!&#39;
      redirect_to &#39;/&#39;
    else
      flash[:warning] = &#39;Invalid email or password!&#39;
      redirect_to &#39;/signup&#39;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new view in the app/views/users folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- app/views/users/new.html.erb --&amp;gt;
&amp;lt;h1&amp;gt;Signup&amp;lt;/h1&amp;gt;
&amp;lt;%= form_tag(&#39;/users&#39;, method: &#39;post&#39;) do %&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= label_tag(:name) %&amp;gt;
    &amp;lt;%= text_field_tag(:name) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= label_tag(:email) %&amp;gt;
    &amp;lt;%= text_field_tag(:email) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= label_tag(:password) %&amp;gt;
    &amp;lt;%= password_field_tag(:password) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= label_tag(:password_confirmation) %&amp;gt;
    &amp;lt;%= password_field_tag(:password_confirmation) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= submit_tag(&amp;quot;Submit&amp;quot;) %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Uncomment the &lt;code&gt;bcrypt&lt;/code&gt; gem in the Gemfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;gem &#39;bcrypt&#39;, &#39;~&amp;gt; version&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the method &lt;code&gt;has_secure_password&lt;/code&gt; to the User model&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/models/user.rb
class User &amp;lt; ActiveRecord::Base
  has_secure_password
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;bundle install&lt;/code&gt; and restart the server&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle install
$ rails server
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;part-2-logout-and-login-create-a-new-session&#34;&gt;Part 2: Logout and login (create a new session)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add session routes to &lt;code&gt;config/routes.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb
get &#39;/login&#39;
get &#39;/login&#39; =&amp;gt; &#39;sessions#new&#39;
post &#39;/login&#39; =&amp;gt; &#39;sessions#create&#39;
get &#39;/logout&#39; =&amp;gt; &#39;sessions#destroy&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a Rails sessions controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rails g controller sessions
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new, create, and destroy action to the sessions controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/sessions_controller
class SessionsController &amp;lt; ApplicationController
  def new
    render &amp;quot;new.html.erb&amp;quot;
  end

  def create
    user = User.find_by(email: params[:email])
    if user &amp;amp;&amp;amp; user.authenticate(params[:password])
      session[:user_id] = user.id
      flash[:success] = &amp;quot;Successfully logged in!&amp;quot;
      redirect_to &#39;/&#39;
    else
      flash[:warning] = &amp;quot;Invalid email or password&amp;quot;
      redirect_to &#39;/login&#39;
    end
  end

  def destroy
    session[:user_id] = nil
    flash[:success] = &amp;quot;You&#39;ve logged out&amp;quot;
    redirect_to &#39;/login&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new view in the &lt;code&gt;app/views/sessions&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- app/views/sessions/new.html.erb --&amp;gt;
&amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt;
&amp;lt;%= form_tag(&#39;/login&#39;, method: &#39;post&#39;) do %&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= label_tag(:email) %&amp;gt;
    &amp;lt;%= text_field_tag(:email) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= label_tag(:password) %&amp;gt;
    &amp;lt;%= text_field_tag(:password) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= submit_tag(&amp;quot;Login&amp;quot;) %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;part-3-authentication-helpers&#34;&gt;Part 3: Authentication Helpers&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Add helper methods in &lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/application_controller.rb
class ApplicationController &amp;lt; ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  def current_user
    @current_user ||= User.find_by(id: session[:user_id]) if session[:user_id]
  end
  helper_method :current_user

  def authenticate_user!
    redirect_to &#39;/login&#39; unless current_user
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Active Record Queries</title>
      <link>https://trevordjones.github.io/cheatsheets/post/active-record-queries/</link>
      <pubDate>Tue, 02 Aug 2016 17:25:07 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/active-record-queries/</guid>
      <description>&lt;p&gt;Substitue &amp;ldquo;Model&amp;rdquo; with your model:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Model.first
# find the first record

Model.last
# find the last record

Model.find_by(attribute: &#39;value&#39;)
# find the record by a specific attribute

Model.order(:attribute)
# order the records by the attribute - ascending is default

Model.order(:attribute :desc)
# order the records by the attribute, use descending order

Model.where(attribute: &#39;value&#39;)
# returns all records where the attribute equals the given value

Model.where(&#39;attribute &amp;gt; ?&#39;, &#39;value&#39;)
# returns all records where the attribute is greater than the given value

Model.where(attribute: &#39;value&#39;, other_attribute: &#39;other_value&#39;)
# returns all records where the attribute is equal to value and other_attribute is equal to other_value

Model.where(&#39;attribute LIKE ?&#39;, &#39;%value%&#39;)
# returns all records where the attribute is similar to the value. The % sign on each side means anything can be before or after - very general search

Model.where(&#39;attribute LIKE ? AND other = ?&#39;, &#39;%value%&#39;, &#39;other_value&#39;)
# returns all records where the attribute is similar to the value AND other is equal to the other value

Model.where(&#39;attribute LIKE? OR other = ?&#39;, &#39;%value%&#39;, &#39;other_value&#39;)
# returns all records where the attribute is similar to the value OR other is equal the other value
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Active Record Methods</title>
      <link>https://trevordjones.github.io/cheatsheets/post/active-record-methods/</link>
      <pubDate>Tue, 02 Aug 2016 17:24:48 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/active-record-methods/</guid>
      <description>&lt;p&gt;Say you created a new model in your Rails app called “Recipe”. This is what you would type into Rails Console to edit the data table associated with the model.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;recipe = Recipe.new(attribute: “input”, attribute: “input”)
recipe.save
# The first command creates a new instance of a Recipe
# The second command saves the recipe data to your database
# remember that &#39;recipe&#39; is only a variable. This can be called anything

recipe = Recipe.create(attribute: “input”, attribute: “input”)
# This is a shortcut for the above two commands, it creates a new instance AND saves it to the database.

recipes = Recipe.all
# This shows all the data table entries (IN RAILS CONSOLE, if you wanted to show this information, on a view page for example, you would have to loop through this array of hashes)

recipe = Recipe.first
# This shows the first data table entry

recipe = Recipe.last
#This shows the last data table entry

recipe = Recipe.find_by(attribute: “specific value”)
# This allows you to find a data entry by a specific attribute’s value.
# EX: Recipe.find_by(chef: “Mark’s Dad”) will find the first recipe whose chef is “Mark’s Dad”

recipe = Recipe.first
recipe.attribute = “input”
recipe.save
#This allows you update an entry in your data table. Remember, you must choose which recipe you want to update first before you can use this method. In this example, we’re choosing to update the first recipe in the data table.

recipe = Recipe.first
recipe.update(attribute: “input”)
# This is a shortcut for the above commands, it changes the instance attributes AND saves it to the database.

recipe = Recipe.first
recipe.destroy
# This allows you destroy an entry in your data table. Remember, you must choose which recipe you want to destroy first before you can use this method. In this example, we’re choosing to destroy the first recipe in the data table.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Github Cheatsheet</title>
      <link>https://trevordjones.github.io/cheatsheets/post/github-cheatsheet/</link>
      <pubDate>Mon, 01 Aug 2016 13:48:13 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/github-cheatsheet/</guid>
      <description>

&lt;p&gt;Repositories are often called Repos.&lt;/p&gt;

&lt;p&gt;You have a local repo (on your computer) and a remote repo (on Github).&lt;/p&gt;

&lt;p&gt;You should first have a local repo.&lt;/p&gt;

&lt;p&gt;Then create a remote repo by going to Github. You will either see a button to create one, or click the &amp;ldquo;+&amp;rdquo; sign at the top of the page and create one there. This page will have instructions for you. You&amp;rsquo;ll need to copy the correct command.&lt;/p&gt;

&lt;h2 id=&#34;push-to-remote-repo&#34;&gt;Push to Remote Repo&lt;/h2&gt;

&lt;p&gt;Return to your local repo and paste the command. It will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git remote add origin &amp;quot;your-remote-repo-url&amp;quot; # will look like git@github.com:username/repo-name.git
$ git add --all
$ git commit -m &amp;quot;commit message&amp;quot;
# Then you can push to your remote repo
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;clone&#34;&gt;Clone&lt;/h2&gt;

&lt;p&gt;If you go to a Github repo you can clone it - you can click &amp;ldquo;Clone or Download&amp;rdquo;, copy the url (be sure you select clone with SSH). &lt;code&gt;cd&lt;/code&gt; into the directory you want this repo to live.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone &amp;quot;the-copied-git-url&amp;quot; # it will look like git@github.com:username/repo-name.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fork&#34;&gt;Fork&lt;/h2&gt;

&lt;p&gt;The top right of any Github repo will have an option to &amp;ldquo;Fork&amp;rdquo; it in the top right corner. You will then be presented with an option to fork to your personal account or any organizations you have permissions to.&lt;/p&gt;

&lt;p&gt;Once it&amp;rsquo;s in your or your organizations account, you can follow the Clone directions above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Cheatsheet</title>
      <link>https://trevordjones.github.io/cheatsheets/post/git-cheatsheet/</link>
      <pubDate>Sun, 31 Jul 2016 15:37:55 -0400</pubDate>
      
      <guid>https://trevordjones.github.io/cheatsheets/post/git-cheatsheet/</guid>
      <description>&lt;p&gt;Tell git to track the folder you are currently in (be sure to &lt;code&gt;cd&lt;/code&gt; into it):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only need to do this once.&lt;/p&gt;

&lt;p&gt;Made changes to your project:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git add --all
$ git commit -m &amp;quot;your message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are some extra commands you can play with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git status
# see which files are being tracked and which are not

$ git log
# Check your log of commits

$ git diff file_name
# See the changes of the files
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>